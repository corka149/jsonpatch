# 2.0.0
- precisare discorso riguardo structs
- rimosso modulo Jsonpatch.Mapper in favore fi apply_patch() piu' flessibile
- increased code coverage
- Jsonpatch.apply_patch signature
  accetta map che rappresentano jsonpatch (key string or atom) e Jsonpath.Operation._ structs
  restituisce {:error, %Jsonpatch.Error{}}
- %Jsonpatch.Error{} reports the patch index, the path and the reason that caused the error
- rimossa JsonpatchException
- review generale delle Map.get con relativo errore di test assenza chiave su base nil
- rimosso protocol Jsonpatch.Operation
- ADD behaviour aderente a specifica -> insert or update
- COPY operation based on ADD operation (as per RFC)
- MOVE operation based on COPY+REMOVE operation (as per RFC)
- REPLACE operation based on REMOVE+ADD operation (as per RFC)
- Introduced new appl_patch option `keys: {:custom, convert_fn}` to convert path fragments with a user specific logic

# 1.0.1
- Escape remaining keys before comparing them to the (already escaped) keys from earlier in the diffing process when determining Remove operations

# 1.0.0
- Allow lists at top level of Jsonpatch.apply_patch
- Fix error message when updating a non existing key in list

# 0.13.1
- Make Jsonpatch faster by (un)escaping conditional

# 0.13.0
- Allow usage of atoms for keys via `keys` option

# 0.12.1
- Generate diffs with correct order (thanks https://github.com/smartepsh)

# 0.12.0
- The functions apply_patch and apply_patch! do not sort anymore a list of patches before applying them

# 0.11.0
- Removed module Jsonpatch.FlatMap because it is not necessary anymore and not the focus of the lib
- Reworked creating diff to create less unnecessary data and for more accurate patches
- Fixed adding values to empty lists (thanks https://github.com/webdeb)

# 0.10.0

- Made jsonpatch more Elixir-API-like by adding Jsonpatch.apply_patch! (which raise an exception) and changed Jsonpatch.apply_patch to return a tuple.
- Implemented escaping for '~' and '/'
- Allow usage of '-' for Add and Copy operation
- Fixed adding and copying values to array
- Improved error feedback of test operation
- Fixed: Replace operation adds error to target
- Cleaned code: Replaced strange constructs of Enum.with_index with Enum.fetch
